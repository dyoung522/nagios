#!/usr/bin/perl -w

#
# Author: 
#
#
# Description:
# -----------
#
# Implementation Notes:
# ---------------------
#
########################################################################

require 5.004;

use POSIX;
use Net::Telnet;

use strict;
use vars qw($PROGNAME $CHECKNAME $AUTHOR $TIMEOUT %ECODES $VERSION);
use vars qw($opt_t $opt_H $opt_p $verbose $opt_debug );

#
# common variables
#
## Change These to suite your needs##
$PROGNAME  = qq(check_winsys);
$CHECKNAME = qq(WINSYS);  # In case this needs to be different
$AUTHOR    = qq(Donovan C. Young);
$VERSION   = "1.1"; # Program version

$TIMEOUT  = qq(15);
%ECODES   = (
              'OK'        => 0,
              'WARNING'   => 1,
              'CRITICAL'  => 2,
              'UNKNOWN'   => 3,
              'DEPENDENT' => 4
            );

#
# Process Options
#
use Getopt::Long;
Getopt::Long::Configure('bundling', 'no_ignore_case');
GetOptions (
              "V|version"     => \&version,
              "h|help"        => \&help,
              "v|verbose+"    => \$verbose,
              "t|timeout=i"   => \$opt_t,
              "H|host=s"      => \$opt_H,
              "p|port=i"      => \$opt_p,
              "debug"         => \$opt_debug,
           );

#
# Global/Default Vars
#
my $Timeout     = 15;

my $telnet = new Net::Telnet( Errmode => 'return',
                              Binmode => 1,
                              Telnetmode => 0,
                            );

if ( not defined $opt_H ) { die "Must include Host via (-H|--host)"; }
if ( not defined $opt_p ) { die "Must include Port via (-p|--port)"; }
if ( not defined $verbose ) { $verbose = 0; }

my $checkstate  = q(OK);   # Set to the ECODE to return (OK, WARNING, or CRITICAL).
my $checkresult = qq(All Drives on $opt_H:$opt_p report OK);          # Verbose message to return
my $checkdata   = undef;        # Nagios "Performance data"

#
# Subroutines
#
sub print_usage {
    print "Usage: $PROGNAME [-vh] [-w warn] [-c crit]\n";
}

sub print_help {
    print "\nWritten by $AUTHOR\n\nPerl plugin for Nagios\n\n";
    print_usage();
    print "
-v, --verbose
   Return additional information. 
   Intended as a command-line aid, not recommended for Nagios script usage.

-t, --timeout
   The amount of time to wait for a response from the host (default is $Timeout)

-H, --host
   The Winchester SecureConsole IP or FQDN to check (required)

-p, --port
   The Port to connect to on the above Host (required)

";
}

sub revision {
    my $commandName = $PROGNAME;
    my $pluginRevision = $VERSION;
    print "$commandName $pluginRevision\n";
    print " The nagios plugins come with ABSOLUTELY NO WARRANTY. You may redistribute\n";
    print " copies of the plugins under the terms of the GNU General Public License.\n";
    print " For more information about these matters, see the file named COPYING.\n";
}

sub version {
    &revision;
    exit $ECODES{'OK'};
}

sub help {
    &print_help;
    exit $ECODES{'OK'};
}

sub myexit {
        my ( $state, $message, $perfdata ) = @_;
        ( $state )   || ( $state   = q(UNKNOWN) );
        ( $message ) || ( $message = q() );

        printf "%s %s", $CHECKNAME, $state;
        if ( $message ) { printf " - %s", $message; }

        if ( defined $perfdata ) { printf "|%s", $perfdata; }

        print "\n";
        if ( defined $ECODES{$state} ) { exit $ECODES{$state}; }
        exit $ECODES{'UNKNOWN'};
}

# Grab a screen full of data from the remote client
sub get_screen {
    my $telnet = shift or return undef;
    my $buffer = ();
    my $screen = ();

    if ( $verbose >= 2 ) { print "Getting screen...\n"; }

    # Refresh the screen
    $telnet->buffer_empty;
    $telnet->put('') or return undef;
    #sleep 5;

    while ( $buffer = $telnet->get(Timeout => 5) ) {
        # Strip off unprintable chars
        #$buffer =~ s/\e\[(\d+(?:;\d+)*)?./ /g;   # Strip Ansi Sequence
        #$buffer =~ s/\[\d;?(\d+)?;?(\d)?m/ /g;   # Strip remaining
        $buffer =~ s/\x1B\x5B\x30\x6D/\x0A/g;    # Convert to \n
        $buffer =~ s/[\x80-\xFF]/ /g;            # Strip Ext ASCII
        $buffer =~ s/[\x00-\x09\x0B-\x1F]/ /g;   # Strip Low ASCII
        $buffer =~ s/\s+/ /g;                    # Condense spaces

        if ( $verbose >= 4 ) { print "Buffer:  $buffer"; }

        $screen .= $buffer;

        # Are we at the logical end of the screen?
        # if so return what we've captured.
        if ( $screen =~ /Refresh Screen/ ) {
            $telnet->buffer_empty;
            return wantarray ? ( split '\x0A', $screen ) : $screen;
        }
    }

    return undef;
}

# Sends a series of Escapes to the remote console until we find the "Home"
# screen, that is, the screen where it asks for the Terminal Type.
# 
# Returns true if the home screen is located false otherwise.
#
sub findhome {
    my $telnet = shift or return undef;
    my $error_count = 0;
    my $error_threshold = 10;  # How many times we try before giving up

    if ( $verbose ) { print "Resetting to Home Position...\n"; }

    while( $error_count < $error_threshold ) {
        my ( $buffer ) = get_screen( $telnet ) or return undef;

        if ( $verbose >= 3 ) { print "Received: $buffer\n"; }

        $error_count++;
        if ( $verbose >= 2 ) { print "Attempt $error_count/$error_threshold\n"; }

        # What indicates the home screen?
        if ( $buffer =~ /VT100/ ) {
            if ( $verbose ) { print "Found Home Position on screen\n"; }
            $telnet->put('') or return undef;   # Enter
            return 1;
        }

        # If we get here, we must not be on the right page so send ESC
        # Need to send twice because the FlashConsole is stupid.
        if ( $verbose >= 3 ) { print "Sending ESC...\n"; }
        $telnet->put('') or return undef;
        sleep 2;    # Pause to make sure output is flushed
    }

    return 0;
}

sub wsi_array_status {
    my $telnet   = shift or return undef;
    my $buffer   = ();
    my $line     = ();
    my %array    = ();
    my $split    = '(\d\s+\d+\s+\d+\s+\d+MB\s+\d\s+[A-Z\-]+\s+[A-Z]+\s+[A-Z0-9]+)';
    my $pattern  = '(\d)\s+(\d+)\s+(\d+)\s+(\d+)MB\s+(\d)\s+([A-Z\-]+)\s+([A-Z]+)\s+([A-Z0-9]+)';
    my $first    = 1;
    my $complete = 0;
    my $idx      = 0;
    my $maxidx   = 0;

    if ( not findhome( $telnet ) ) {
        myexit( 'UNKNOWN', 'Unable to find the Home Position, giving up', undef );
    }

    if ( $verbose ) { print "Getting Array Information...\n"; }

    # Go to Show and Edit Disk Drives
    $telnet->put('d') or return undef;

    while ( $buffer = get_screen( $telnet ) ) {

        if ( $verbose >= 4 ) { print "buffer = $buffer\n"; }

        for $line ( $buffer =~ m/$split/gc ) {

            if ( $verbose >= 3 ) { print "line = $line\n"; }

            next unless my ( $chl, $id, $size, $speed, $ld, $status, $vender, $serial ) =
                ( $line =~ m/$pattern/og );

            $idx = $chl . $id;

            if ( $maxidx == $idx ) {
                return %array if $complete > 1;
                $complete++;
            }
            if ( $maxidx < $idx ) { $maxidx = $idx; $complete = 0; }
            if ( $verbose >= 2 ) { print "Highest Index = $maxidx\n"; }

            next if $array{$chl}{$id};

            $array{$chl}{$id}{SIZE}   = $size;
            $array{$chl}{$id}{SPEED}  = $speed;
            $array{$chl}{$id}{LD}     = $ld;
            $array{$chl}{$id}{STATUS} = $status;
            $array{$chl}{$id}{VENDER} = $vender;
            $array{$chl}{$id}{SERIAL} = $serial;
        }

        # Send 7 arrow down keys to get a new page.
        for ( my $i = 0 ; $i < 8 ; $i++ ) { $telnet->put('[B') or return undef; }

        # We need to send another 7 down arrows the first time through
        if ( $first ) {
            for ( my $i = 0 ; $i < 8 ; $i++ ) { $telnet->put('[B') or return undef; }
            $first = 0;
        }
    }

    return undef;
}

#
# Set our defaults
#
# Main()
MAIN: {
    if ( defined $opt_debug ) { my $fh = $telnet->dump_log('debuglog'); }

    if ( $verbose ) { print "Opening connection to $opt_H:$opt_p\n"; }

    $telnet->open( Host => $opt_H,
                   Port => $opt_p,
                 )
        or myexit( 'CRITICAL', "Unable to connect to $opt_H:$opt_p", $telnet->errmsg );

    my %Drives = wsi_array_status( $telnet )
        or myexit( 'CRITICAL', "Unable to obtain array status for $opt_H:$opt_p", $telnet->errmsg );

    for my $chl ( sort { $a <=> $b } keys %Drives ) {
        for my $id ( sort { $a <=> $b } keys %{$Drives{$chl}} ) {
            if ( $verbose >= 2 ) {
                printf "%d %d %d %d %d %s %s %s\n",
                    $chl, $id,
                    $Drives{$chl}{$id}{LD},
                    $Drives{$chl}{$id}{SPEED},
                    $Drives{$chl}{$id}{SIZE},
                    $Drives{$chl}{$id}{STATUS},
                    $Drives{$chl}{$id}{VENDER},
                    $Drives{$chl}{$id}{SERIAL};
            }

            my $status = $Drives{$chl}{$id}{STATUS};

            if ( $status =~ /REBUILD/ ) {
                $checkstate  = 'WARNING';
                $checkresult = "Drive $chl $id is in state $status";
                $checkdata   = "$chl $id $Drives{$chl}{$id}{LD} $Drives{$chl}{$id}{SPEED} $Drives{$chl}{$id}{SIZE} $Drives{$chl}{$id}{STATUS} $Drives{$chl}{$id}{VENDER} $Drives{$chl}{$id}{SERIAL}";
                last;
            }

            if ( not ( $status =~ /ON-LINE/ || $status =~ /STAND-BY/ ) ) {
                $checkstate  = 'CRITICAL';
                $checkresult = "Drive $chl $id is in state $status";
                $checkdata   = "$chl $id $Drives{$chl}{$id}{LD} $Drives{$chl}{$id}{SPEED} $Drives{$chl}{$id}{SIZE} $Drives{$chl}{$id}{STATUS} $Drives{$chl}{$id}{VENDER} $Drives{$chl}{$id}{SERIAL}";
                last;
            }

        }
    }

    $telnet->close();
}

#
# Exit based on current state
#
myexit( $checkstate, $checkresult, $checkdata );

#======= end script =======
1;
