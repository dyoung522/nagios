#!/usr/bin/perl -w
#
# Author: 
#
#  $Id$
#
# Description:
# -----------
#
# Implementation Notes:
# ---------------------
#
########################################################################
#
#  $Log: check_r2queue,v $
#  Revision 1.5  2007/08/08 22:17:35  nagios
#  Minor change:  removed $checkdata from global vars (not needed).
#
#  Revision 1.4  2007/08/08 22:12:41  nagios
#  Fixed conflict with nagios_exit() routine in nagios.  Changed to myexit().
#
#  Revision 1.3  2007/08/08 22:02:28  nagios
#  Added command printout to nagios output when -v provided
#
#  Revision 1.2  2007/08/08 21:29:08  nagios
#  Minor correction
#
#  Revision 1.1  2007/08/08 21:17:04  nagios
#  Checks the R2 queue.  Initial release.
#
#
########################################################################

require 5.004;

use POSIX;

use strict;
use vars qw($PROGNAME $CHECKNAME $AUTHOR %ECODES);
use vars qw($opt_w $opt_c $opt_s $timeout $verbose $checkhost $checkport);

#
# common variables
#
## Change These to suite your needs##
$PROGNAME  = qq(check_r2queue);
$CHECKNAME = qq(R2QUEUE);  # In case this needs to be different
$AUTHOR    = qq(Donovan Young);

%ECODES   = (
              'OK'        => 0,
              'WARNING'   => 1,
              'CRITICAL'  => 2,
              'UNKNOWN'   => 3,
              'DEPENDENT' => 4
            );

#
# Process Options
#
use Getopt::Long;
Getopt::Long::Configure('bundling', 'no_ignore_case');
GetOptions (
              "V|version"     => \&version,
              "h|help"        => \&help,
              "v|verbose"     => \$verbose,
              "H|host=s"      => \$checkhost,
              "p|port=i"      => \$checkport,
              "t|timeout=i"   => \$timeout,
           );

#
# Subroutines
#
sub print_usage () {
    print "Usage: $PROGNAME [-vVh] <-H host> [-p port]\n";
}

sub print_help () {
    print "\nWritten by $AUTHOR\n\nPerl plugin for Nagios\n\n";
    print_usage();
    print "
-v, --verbose
   Return additional information. 
   Intended as a command-line aid, not recommended for Nagios script usage.

-V, --version
   Display version information.

-H, --host <hostname>
   The host to run the check against.  This is required.

-p, --port <port>
   The port to check, default is 7700.

";
}

sub print_revision ($$) {
    my $commandName = shift;
    my $pluginRevision = shift;
    $pluginRevision =~ s/^\$Revision: //;
    $pluginRevision =~ s/ \$\s*$//;
    print "$commandName $pluginRevision - Written by $AUTHOR\n";
}

sub revision() {
    print_revision( $PROGNAME, '$Revision: 1.5 $' );
}

sub version () {
    revision();
    exit $ECODES{'OK'};
}

sub help () {
    print_help();
    exit $ECODES{'OK'};
}

sub myexit($$$) {
    my ( $state, $message, $checkdata ) = @_;
    ( $state )   || ( $state   = q(UNKNOWN) );
    ( $message ) || ( $message = q() );
    printf "%s %s - %s", $CHECKNAME, $state, $message;
    if ( defined $checkdata ) { printf "|%s", $checkdata; }
    print "\n";
    exit $ECODES{$state};
}

#
# Sanity checks & defaults
#
if ( not defined $timeout   ) { $timeout = qq(15); }
if ( not defined $checkport ) { $checkport = 7700; }
if ( not defined $checkhost ) { print "ERROR:  Missing Host to check\n"; &help; }

my $checkstate  = q(UNKNOWN);
my $checkresult = q();
my $checkdata   = q();

# Main()
MAIN: {
    my $command = qq(wget -q -O - http://$checkhost:$checkport/RequestQueue?GetQueue=1);

    if ( defined $verbose ) { $checkdata = qq($command); }

    my $Result  = qx($command);
    ( $Result ) = ( $Result =~ /(\d+)/ ); # convert to digits only

    if ( defined $Result ) {
        if ( $Result <= 1 ) { $checkstate = q(OK); }
        if ( $Result == 2 ) { $checkstate = q(WARNING); }
        if ( $Result >= 3 ) { $checkstate = q(CRITICAL); }
        $checkresult = "Returned $Result";
    } else {
        $checkstate  = q(CRITICAL);
        $checkresult = "$command did not return a valid result!"
    }
}

#
# Exit based on current state
#
myexit( $checkstate, $checkresult, $checkdata );

#======= end script =======
1;
