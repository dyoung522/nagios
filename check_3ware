#!/usr/bin/perl -w

#
# Author: 
#
#  $Id: check_3ware,v 1.4 2007/09/11 16:14:06 dyoung Exp $
#
# Description:
# -----------
#
# Implementation Notes:
# ---------------------
#
#  tw_cli can only be run by root so we are running it via sudo.
#
#  This requires the following line be added to /etc/sudoers:
#
#  nagios  ALL = NOPASSWD: /usr/sbin/tw_cli
#    (substitute /usr/sbin/tw_cli for the proper path to tw_cli)
#
########################################################################
#
#  $Log: check_3ware,v $
#  Revision 1.4  2007/09/11 16:14:06  dyoung
#  Minor fix in check routine.  INIT should now produce output as expected.
#
#  Revision 1.3  2007/07/24 16:42:31  nagios
#  Added additional checks for INIT and REBUILD
#
#  Revision 1.2  2007/06/25 22:58:02  dyoung
#  Minor changes
#
#  Revision 1.1  2007/06/25 22:45:01  dyoung
#  Initial release, nagios script to check the status of the 3ware devices
#
#
########################################################################

require 5.004;

use POSIX;

use strict;
use vars qw($PROGNAME $CHECKNAME $AUTHOR $TIMEOUT %ECODES);
use vars qw($opt_w $opt_c $opt_s $verbose);

#
# common variables
#
## Change These to suite your needs##
$PROGNAME  = q(check_3ware);
$CHECKNAME = q(3WARE);
$AUTHOR    = q(Donovan Young);

$TIMEOUT  = q(15);
%ECODES   = (
              'OK'        => 0,
              'WARNING'   => 1,
              'CRITICAL'  => 2,
              'UNKNOWN'   => 3,
              'DEPENDENT' => 4
            );

#
# Process Options
#
use Getopt::Long;
Getopt::Long::Configure('bundling', 'no_ignore_case');
GetOptions (
              "V|version"     => \&version,
              "h|help"        => \&help,
              "v|verbose"     => \$verbose,
              "w|warning=i"   => \$opt_w,
              "c|critical=i"  => \$opt_c,
           );

#
# Subroutines
#
sub print_usage () {
	print "Usage: $PROGNAME [-vh] [-w warn] [-c crit]\n";
}

sub print_help () {
	print "\nWritten by $AUTHOR\n\nPerl plugin for Nagios\n\n";
	print_usage();
	print "
-v, --verbose
   Return additional information. 
   Intended as a command-line aid, not recommended for Nagios script usage.
   
-w, --warning=INTEGER
   Level at which we should issue a warning.  If omitted, no warning is generated. 
   
-c, --critical=INTEGER
   Level at which we should issue a critical alert.  A critical is also generated
   if we cannot reach the StatusCheck webpage.

";
}

sub print_revision ($$) {
    my $commandName = shift;
    my $pluginRevision = shift;
    $pluginRevision =~ s/^\$Revision: //;
    $pluginRevision =~ s/ \$\s*$//;
    print "$commandName $pluginRevision\n";
    print " The nagios plugins come with ABSOLUTELY NO WARRANTY. You may redistribute\n";
    print " copies of the plugins under the terms of the GNU General Public License.\n";
    print " For more information about these matters, see the file named COPYING.\n";
}

sub revision() {
	print_revision($PROGNAME,'$Revision: 1.4 $');
}

sub version () {
	revision();
	exit $ECODES{'OK'};
}

sub help () {
	print_help();
	exit $ECODES{'OK'};
}

sub nagios_exit($$) {
        my ( $state, $message ) = @_;
        ( $state )   || ( $state   = q(UNKNOWN) );
        ( $message ) || ( $message = q() );
        printf "%s %s - %s\n", $CHECKNAME, $state, $message;
        exit $ECODES{$state};
}

sub get_controllers($) {
    my ( $tw_cli ) = @_;
    my @controllers = ();

    open TWCLI, "sudo $tw_cli show |" or die "Unable to run $tw_cli:  $!\n";
    while( <TWCLI> ) {
        next unless /^\s*(c\d+)/;
        push @controllers, $1;
   }
   close TWCLI;

   return @controllers;
}

sub get_units($) {
    my ( $tw_cli ) = @_;
    my %units = ();

    for my $controller ( get_controllers($tw_cli) ) {
        open TWCLI, "sudo $tw_cli /$controller show |" or die "Unable to run $tw_cli:  $!\n";
        while( <TWCLI> ) {
            next unless /^\s*(u\d+)\s+\S+\s+(\S+)/;
            $units{"/$controller/$1"} = $2;
       }
       close TWCLI;
    }

    return %units;
}

#
# Set our defaults
#
my $checkstate  = q(UNKNOWN);
my $checkresult = qq(An error has occurred in $PROGNAME!);
my $tw_cli = ( split( /\s+/, qx/whereis tw_cli/ ) )[1];

if ( not defined $tw_cli ) { nagios_exit( 'DEPENDENT', "tw_cli is not installed on this host" ); }

# Main()
MAIN: {
    my %unit = get_units($tw_cli);
    last unless %unit;

    $checkstate = q(OK);
    $checkresult = q();

    for my $key ( sort keys %unit ) {
        # Catch all, CRIT if not "OK"
        if ( not $unit{$key} =~ /OK/  ) { $checkstate = q(CRITICAL); }

        # INIT is OK
        if ( $unit{$key} =~ /INIT/    ) { $checkstate = q(OK); }

        # Only WARN on "Rebuild"
        if ( $unit{$key} =~ /REBUILD/ ) { $checkstate = q(WARNING); }

        $checkresult .= "Unit $key is $unit{$key}; ";
    }
}

#
# Exit based on current state
#
nagios_exit( $checkstate, $checkresult );

#======= end script =======
1;
