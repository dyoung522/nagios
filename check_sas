#!/usr/bin/perl -w

#
# Author: 
#
#
# Description:
# -----------
#
# Implementation Notes:
# ---------------------
#
########################################################################

require 5.004;

use POSIX;
use Time::Local;

use strict;
use vars qw($PROGNAME $CHECKNAME $AUTHOR $TIMEOUT %ECODES $VERSION);
use vars qw($opt_w $opt_c $opt_s $verbose);

#
# common variables
#
## Change These to suite your needs##
$PROGNAME  = qq(check_sas);
$CHECKNAME = qq(SAS);  # In case this needs to be different
$AUTHOR    = qq(Donovan C. Young);
$VERSION   = "1.0"; # Program version

$TIMEOUT  = qq(15);
%ECODES   = (
              'OK'        => 0,
              'WARNING'   => 1,
              'CRITICAL'  => 2,
              'UNKNOWN'   => 3,
            );

#
# Process Options
#
use Getopt::Long;
Getopt::Long::Configure('bundling', 'no_ignore_case');
GetOptions (
              "V|version"     => \&version,
              "h|help"        => \&help,
              "v|verbose+"    => \$verbose,
              "w|warning=i"   => \$opt_w,
              "c|critical=i"  => \$opt_c,
           );

#
# Subroutines
#
sub print_usage {
    print "Usage: $PROGNAME [-vh] [-w warn] [-c crit]\n";
}

sub print_help {
    print "\nWritten by $AUTHOR\n\nPerl plugin for Nagios\n\n";
    print_usage();
    print "
-v, --verbose
   Return additional information. 
   Intended as a command-line aid, not recommended for Nagios script usage.

-w, --warning=INTEGER
   Level at which we should issue a warning.  If omitted, no warning is generated. 

-c, --critical=INTEGER
   Level at which we should issue a critical alert.

";
}

sub revision {
    my $commandName = $PROGNAME;
    my $pluginRevision = $VERSION;
    print "$commandName $pluginRevision\n";
    print " The nagios plugins come with ABSOLUTELY NO WARRANTY. You may redistribute\n";
    print " copies of the plugins under the terms of the GNU General Public License.\n";
    print " For more information about these matters, see the file named COPYING.\n";
}

sub version {
    revision();
    exit $ECODES{'OK'};
}

sub help {
    print_help();
    exit $ECODES{'OK'};
}

sub myexit {
        my ( $state, $message, $perfdata ) = @_;
        ( $state )    || ( $state    = q(UNKNOWN) );
        ( $message )  || ( $message  = q() );
        ( $perfdata ) || ( $perfdata = undef );

        printf "%s %s", $CHECKNAME, $state;
        if ( $message ) { printf " - %s", $message; }

        if ( defined $perfdata ) { printf "|%s", $perfdata; }

        print "\n";
        exit $ECODES{$state};
}

#
# Set our defaults
#
my %Months      = ( 'JAN' => 1,
                    'FEB' => 2,
                    'MAR' => 3,
                    'APR' => 4,
                    'MAY' => 5,
                    'JUN' => 6,
                    'JUL' => 7,
                    'AUG' => 8,
                    'SEP' => 9,
                    'OCT' => 10,
                    'NOV' => 11,
                    'DEC' => 12 );
my $SAS         = q(/opt/SAS/sas);
my $checkstate  = q(UNKNOWN);   # Set to the ECODE to return (OK, WARNING, or CRITICAL).
my $checkresult = q();          # Verbose message to return
my $checkdata   = q();          # Nagios "Performance data"
my $expiration  = undef;
my $days        = 60 * 60 * 24;

# Main()
MAIN: {
    if ( not -x $SAS ) {
        $checkstate = q(UNKNOWN);
        $checkresult = "SAS does not appear to be installed on this server";
        last;
    }

    open SAS, "echo 'proc setinit; run;' | $SAS -nonews -stdio 2>&1 |" or myexit( 'CRITICAL', "Unable to run SAS" );
    while ( <SAS> ) {
        if ( defined $verbose and $verbose >= 2 ) { print; }
        if ( /^Expiration:\s+(\S*)\./ ) { $expiration = $1; }
    }

    if ( not defined $expiration ) {
        $checkstate  = q(UNKNOWN);
        $checkresult = q(We did not receive a valid response from SAS);
        last;
    }

    my ( $day, $month, $year ) = $expiration =~ /(\d+)(\w{3})(\d{4})/;
    $month = $Months{$month};
    my $date_expire = timelocal( 0, 0, 0, $day, $month - 1, $year - 1900 );
    my $date_today  = time;
    my $date_delta  = sprintf "%.0f", ( $date_expire - $date_today ) / $days;

    if ( defined $verbose ) {
        print "Expiration = $month/$day/$year ($expiration)\n";
        print "     Today = $date_today\n";
        print "    Expire = $date_expire\n";
        print "   In Days = $date_delta\n";
    }

    if ( $date_delta > 0 ) {
        $checkstate  = q(OK);
        $checkresult = "SAS Expires on $month/$day/$year";
        $checkdata   = "$date_delta days remaining";
    }
    if ( defined $opt_w and $date_delta <= $opt_w ) {
        $checkstate  = q(WARNING);
        $checkresult = "SAS Expires on $month/$day/$year ( in $date_delta days )";
    }
    if ( defined $opt_c and $date_delta <= $opt_c ) {
        $checkstate  = q(CRITICAL);
        $checkresult = "SAS Expires on $month/$day/$year ( in $date_delta days )";
    }
    if ( $date_delta < 0 ) {
        $checkstate  = q(CRITICAL);
        $checkresult = "SAS Expired on $month/$day/$year ( " . $date_delta * -1 . " days ago! )";
    }
}

#
# Exit based on current state
#
myexit( $checkstate, $checkresult, $checkdata );

#======= end script =======
1;
