#!/usr/bin/perl -w

#
# Author:  Donovan C. Young
#
# Description:
# -----------
#
#    Runs a test transaction through the Rhino2 L2C system
#
# Implementation Notes:
# ---------------------
#
#    Requires IPC::Open2
#    Requires Reuben's test_tcp program
#
########################################################################

require 5.004;

use POSIX;
use IPC::Open2;

use strict;
use vars qw($PROGNAME $CHECKNAME $AUTHOR $TIMEOUT %ECODES $VERSION $HOST $PORT);
use vars qw($opt_w $opt_c $opt_s $verbose $opt_host $opt_port);

#
# common variables
#
## Change These to suite your needs##
$PROGNAME  = qq(check_l2c_frontend);
$CHECKNAME = qq($PROGNAME);  # In case this needs to be different
$AUTHOR    = qq(Donovan Young);
$VERSION   = "1.0"; # Program version
$PORT      = '7750';
$HOST      = '127.0.0.1';

$TIMEOUT  = qq(15);
%ECODES   = (
              'OK'        => 0,
              'WARNING'   => 1,
              'CRITICAL'  => 2,
              'UNKNOWN'   => 3,
              'DEPENDENT' => 4
            );

#
# Process Options
#
use Getopt::Long;
Getopt::Long::Configure('bundling', 'no_ignore_case');
GetOptions (
              "V|version"     => \&version,
              "h|help"        => \&help,
              "v|verbose"     => \$verbose,
              "w|warning=i"   => \$opt_w,
              "c|critical=i"  => \$opt_c,
              "H|host=s"      => \$opt_host,
              "p|port=i"      => \$opt_port,
           );

#
# Subroutines
#
sub print_usage () {
    print "Usage: $PROGNAME [-vh] [-w warn] [-c crit] [-p port]\n";
}

sub print_help () {
    print "\nWritten by $AUTHOR\n\nPerl plugin for Nagios\n\n";
    print_usage();
    print "
-v, --verbose
    Return additional information. 
    Intended as a command-line aid, not recommended for Nagios script usage.

-w, --warning=INTEGER
    Level at which we should issue a warning.  If omitted, no warning is generated. 

-c, --critical=INTEGER
    Level at which we should issue a critical alert.  A critical is also generated
    if we cannot reach the StatusCheck webpage.

-H, --host=IP
    Use IP instead of $HOST as the host.

-p, --port=INTEGER
    Use this TCP port instead of $PORT.

";
}

sub revision () {
    my $commandName = $PROGNAME;
    my $pluginRevision = $VERSION;
    print "$commandName $pluginRevision\n";
    print " The nagios plugins come with ABSOLUTELY NO WARRANTY. You may redistribute\n";
    print " copies of the plugins under the terms of the GNU General Public License.\n";
    print " For more information about these matters, see the file named COPYING.\n";
}

sub version () {
    revision();
    exit $ECODES{'OK'};
}

sub help () {
    print_help();
    exit $ECODES{'OK'};
}

sub myexit($$$) {
        my ( $state, $message, $perfdata ) = @_;
        ( $state )   || ( $state   = q(UNKNOWN) );
        ( $message ) || ( $message = q() );

        printf "%s %s", $CHECKNAME, $state;
        if ( $message ) { printf " - %s", $message; }
        if ( defined $perfdata ) { printf "|%s", $perfdata; }

        print "\n";
        exit $ECODES{$state};
}

#
# Set our defaults
#
my $checkstate  = q(UNKNOWN);
my $checkresult = q();
my $checkdata   = undef;

if ( defined $opt_host ) { $HOST = $opt_host; }
if ( defined $opt_port ) { $PORT = $opt_port; }

my $TEST_TCP    = "/usr/local/rhino2/scripts/test_tcp";
my $TEST_XML = <<EOX;
<l2crequest xmlns="http://www.l2cinc.com/L2CQS/1.0">
    <type>request</type>
    <purpose>test</purpose>
    <customerId>600103</customerId>
    <txRefId>0011070085208263</txRefId>
    <query xmlns="">
        <firstName>Owen</firstName>
        <lastName>Lawson</lastName>
        <address type="current">
            <line1>1385 Park Trace SE</line1>
            <city>Atlanta</city>
            <state>GA</state>
            <zip>30315</zip>
        </address>
        <address type="previous" />
        <dateOfBirth>1979-01-17</dateOfBirth>
        <SSN>657163672</SSN>
    </query>
</l2crequest>
EOX

if ( not -x $TEST_TCP ) {
    $checkstate = q(CRITICAL);
    $checkresult = "$TEST_TCP does not exist, or is not executable";
    myexit( $checkstate, $checkresult, $checkdata );
}

# Main()
MAIN: {
    if ( defined $verbose ) { print "Opening: $TEST_TCP $HOST $PORT\n"; }
    eval {
        open2( *TEST_IN, *TEST_OUT, "$TEST_TCP $HOST $PORT" );
    };
    if ( $@ ) {
        myexit( 'CRITICAL', "Unable to run $TEST_TCP: $!", undef );
    }

    if ( defined $verbose ) { print "Sending:\n$TEST_XML\n"; }
    print TEST_OUT $TEST_XML; close( TEST_OUT );
 
    my $response = <TEST_IN>; close( TEST_IN );
    if ( defined $verbose && defined $response ) { print "Received: $response\n"; }

    if ( defined $response && $response =~ /firstScore/ ) {
        $checkstate  = q(OK);
        $checkdata   = $response;
    } else {
        $checkstate  = q(CRITICAL);
        $checkresult = q(Did not receive a valid response);
        $checkdata   = $response;
    }
}

#
# Exit based on current state
#
myexit( $checkstate, $checkresult, $checkdata );

#======= end script =======
1;
