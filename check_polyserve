#!/usr/bin/perl -w

#
# Author: 
#
#
# Description:
# -----------
#
# Implementation Notes:
# ---------------------
#
########################################################################

require 5.004;

use POSIX;

use strict;
use vars qw($PROGNAME $CHECKNAME $AUTHOR $TIMEOUT %ECODES $VERSION);
use vars qw($opt_w $opt_c $opt_s $verbose);

#
# common variables
#
## Change These to suite your needs##
$PROGNAME  = qq(check_polyserve);
$CHECKNAME = qq($PROGNAME);  # In case this needs to be different
$AUTHOR    = qq(Donovan C. Young);
$VERSION   = "1.0"; # Program version

$TIMEOUT  = qq(15);
%ECODES   = (
              'OK'        => 0,
              'WARNING'   => 1,
              'CRITICAL'  => 2,
              'UNKNOWN'   => 3,
              'DEPENDENT' => 4
            );

#
# Process Options
#
use Getopt::Long;
Getopt::Long::Configure('bundling', 'no_ignore_case');
GetOptions (
              "V|version"     => \&version,
              "h|help"        => \&help,
              "v|verbose"     => \$verbose,
           );

#
# Subroutines
#
sub print_usage {
    print "Usage: $PROGNAME [-vh] [-w warn] [-c crit]\n";
}

sub print_help {
    print "\nWritten by $AUTHOR\n\nPerl plugin for Nagios\n\n";
    print_usage();
    print "
-v, --verbose
   Return additional information. 
   Intended as a command-line aid, not recommended for Nagios script usage.
";
}

sub revision {
    my $commandName = $PROGNAME;
    my $pluginRevision = $VERSION;
    print "$commandName $pluginRevision\n";
    print " The nagios plugins come with ABSOLUTELY NO WARRANTY. You may redistribute\n";
    print " copies of the plugins under the terms of the GNU General Public License.\n";
    print " For more information about these matters, see the file named COPYING.\n";
}

sub version {
    &revision;
    exit $ECODES{'OK'};
}

sub help {
    &print_help;
    exit $ECODES{'OK'};
}

sub myexit {
        my ( $state, $message, $perfdata ) = @_;
        ( $state )   || ( $state   = q(UNKNOWN) );
        ( $message ) || ( $message = q() );

        printf "%s %s", $CHECKNAME, $state;
        if ( $message ) { printf " - %s", $message; }

        if ( defined $perfdata ) { printf "|%s", $perfdata; }

        print "\n";
        if ( defined $ECODES{$state} ) { exit $ECODES{$state}; }
        exit $ECODES{'UNKNOWN'};
}

#
# Set our defaults
#
my $checkstate  = q(OK);   # Set to the ECODE to return (OK, WARNING, or CRITICAL).
my $checkresult = q(PolyServe Matrix is OK);          # Verbose message to return
my $checkdata   = undef;        # Nagios "Performance data"

# Main()
MAIN: {
    my $MX = q(/usr/bin/mx);
    my ( $Server, $Status, $FSET ) = ();

    myexit( 'UNKNOWN', 'MX Command not found on this server', undef ) unless -x $MX;
    open MX, "mx matrix status |" or myexit( 'CRITICAL', 'Unable to run mx command', $! );

    while( <MX> ) {
        # We're only interested in FS and SERVER lines
        next unless /^(FS|SERVER)/;

        # Check FS Status - Alarm if they aren't MOUNTED or PERSISTENT
        if ( ( $Status, $FSET, $Server ) = /FS\s+psd\d+p\d+\s+\(.*\)\s+(\w+)\s*\((.*)\)\s+\S+\s+(\S+)/ ) {
            if ( $verbose ) { print "$FSET on $Server is $Status\n"; }
            if ( not $Status =~ /(MOUNTED|PERSISTENT)/ ) { myexit( 'CRITICAL', "$FSET on $Server is $Status", $_ ); }
        }

        # Check SERVER status - Alarm if it's not UP
        if ( ( $Server, $Status ) = /SERVER\s+(\S+)\s+(\S+)/ ) {
            if ( $verbose ) { print "$Server is $Status\n"; }
            if ( not $Status =~ /UP/ ) { myexit( 'CRITICAL', "$Server is $Status", $_ ); }
        }
    }
    close MX;
}

#
# Exit based on current state
#
myexit( $checkstate, $checkresult, $checkdata );

#======= end script =======
1;
